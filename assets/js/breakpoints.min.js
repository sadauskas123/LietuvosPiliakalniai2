var breakpoints = (function () {
    "use strict";
    
    function e(config) {
        t.init(config);
    }
    
    var t = {
        list: null,
        media: {},
        events: [],
        
        // Inicijuoja breakpoints sistemą
        init: function (config) {
            t.list = config;
            window.addEventListener("resize", t.poll);
            window.addEventListener("orientationchange", t.poll);
            window.addEventListener("load", t.poll);
            window.addEventListener("fullscreenchange", t.poll);
        },
        
        // Patikrina, ar tam tikras breakpoint yra aktyvus
        active: function (query) {
            if (!(query in t.media)) {
                var operator, name, mediaQuery;
                
                if (query.startsWith(">=")) {
                    operator = "gte";
                    name = query.substr(2);
                } else if (query.startsWith("<=")) {
                    operator = "lte";
                    name = query.substr(2);
                } else if (query.startsWith(">")) {
                    operator = "gt";
                    name = query.substr(1);
                } else if (query.startsWith("<")) {
                    operator = "lt";
                    name = query.substr(1);
                } else if (query.startsWith("!")) {
                    operator = "not";
                    name = query.substr(1);
                } else {
                    operator = "eq";
                    name = query;
                }
                
                if (name && name in t.list) {
                    var range = t.list[name];
                    if (Array.isArray(range)) {
                        var min = parseInt(range[0]);
                        var max = parseInt(range[1]);
                        var unit = range[0].replace(min, "");
                        
                        if (isNaN(min)) {
                            switch (operator) {
                                case "lte": mediaQuery = "screen and (max-width: " + max + unit + ")"; break;
                                case "not": mediaQuery = "screen and (min-width: " + (max + 1) + unit + ")"; break;
                                default: mediaQuery = "screen";
                            }
                        } else if (isNaN(max)) {
                            switch (operator) {
                                case "gte": mediaQuery = "screen and (min-width: " + min + unit + ")"; break;
                                case "not": mediaQuery = "screen and (max-width: " + (min - 1) + unit + ")"; break;
                                default: mediaQuery = "screen and (min-width: " + min + unit + ")";
                            }
                        } else {
                            switch (operator) {
                                case "gte": mediaQuery = "screen and (min-width: " + min + unit + ")"; break;
                                case "lte": mediaQuery = "screen and (max-width: " + max + unit + ")"; break;
                                case "gt": mediaQuery = "screen and (min-width: " + (max + 1) + unit + ")"; break;
                                case "lt": mediaQuery = "screen and (max-width: " + (min - 1) + unit + ")"; break;
                                case "not": mediaQuery = "screen and (max-width: " + (min - 1) + unit + "), screen and (min-width: " + (max + 1) + unit + ")"; break;
                                default: mediaQuery = "screen and (min-width: " + min + unit + ") and (max-width: " + max + unit + ")";
                            }
                        }
                    } else {
                        mediaQuery = range.startsWith("(") ? "screen and " + range : range;
                    }
                }
                
                t.media[query] = mediaQuery || false;
            }
            
            return t.media[query] !== false && window.matchMedia(t.media[query]).matches;
        },
        
        // Prideda įvykį, kuris aktyvuojamas, kai breakpoint tampa aktyvus
        on: function (query, handler) {
            t.events.push({ query: query, handler: handler, state: false });
            if (t.active(query)) handler();
        },
        
        // Tikrina ir aktyvuoja įvykius pagal dabartinį ekrano dydį
        poll: function () {
            t.events.forEach(function (event) {
                if (t.active(event.query)) {
                    if (!event.state) {
                        event.state = true;
                        event.handler();
                    }
                } else {
                    event.state = false;
                }
            });
        }
    };
    
    e._ = t;
    e.on = function (query, handler) { t.on(query, handler); };
    e.active = function (query) { return t.active(query); };
    
    return e;
})();

// Modulio eksportavimas
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        global.breakpoints = factory();
    }
})(this, function () {
    return breakpoints;
});