var browser = (function () {
    "use strict";
    
    var t = {
        name: null,
        version: null,
        os: null,
        osVersion: null,
        touch: null,
        mobile: null,
        _canUse: null,

        // Tikrina, ar naršyklė palaiko tam tikrą CSS savybę
        canUse: function (property) {
            if (!t._canUse) {
                t._canUse = document.createElement("div");
            }
            var style = t._canUse.style;
            var capitalized = property.charAt(0).toUpperCase() + property.slice(1);
            return property in style || "Moz" + capitalized in style || "Webkit" + capitalized in style || "O" + capitalized in style || "ms" + capitalized in style;
        },

        init: function () {
            var userAgent = navigator.userAgent;
            var browserName = "other";
            var browserVersion = 0;
            
            var browsers = [
                ["firefox", /Firefox\/([0-9\.]+)/],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
                ["opera", /OPR\/([0-9\.]+)/],
                ["opera", /Opera\/([0-9\.]+)/],
                ["edge", /Edge\/([0-9\.]+)/],
                ["safari", /Version\/([0-9\.]+).+Safari/],
                ["chrome", /Chrome\/([0-9\.]+)/],
                ["ie", /MSIE ([0-9]+)/],
                ["ie", /Trident\/.+rv:([0-9]+)/]
            ];
            
            for (var i = 0; i < browsers.length; i++) {
                if (userAgent.match(browsers[i][1])) {
                    browserName = browsers[i][0];
                    browserVersion = parseFloat(RegExp.$1);
                    break;
                }
            }
            
            t.name = browserName;
            t.version = browserVersion;
            
            var osName = "other";
            var osVersion = 0;
            
            var osList = [
                ["ios", /([0-9_]+) like Mac OS X/, function (v) { return v.replace(/_/g, "."); }],
                ["ios", /CPU like Mac OS X/, function () { return 0; }],
                ["wp", /Windows Phone ([0-9\.]+)/],
                ["android", /Android ([0-9\.]+)/],
                ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, function (v) { return v.replace(/_/g, "."); }],
                ["windows", /Windows NT ([0-9\.]+)/],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
                ["linux", /Linux/],
                ["bsd", /BSD/],
                ["unix", /X11/]
            ];
            
            for (var j = 0; j < osList.length; j++) {
                if (userAgent.match(osList[j][1])) {
                    osName = osList[j][0];
                    osVersion = osList[j][2] ? osList[j][2](RegExp.$1) : parseFloat(RegExp.$1);
                    break;
                }
            }
            
            // Speciali iOS įrenginių atpažinimo logika
            if (osName === "mac" && "ontouchstart" in window && (
                (screen.width === 1024 && screen.height === 1366) ||
                (screen.width === 834 && screen.height === 1112) ||
                (screen.width === 810 && screen.height === 1080) ||
                (screen.width === 768 && screen.height === 1024)
            )) {
                osName = "ios";
            }
            
            t.os = osName;
            t.osVersion = osVersion;
            t.touch = t.os === "wp" ? navigator.msMaxTouchPoints > 0 : "ontouchstart" in window;
            t.mobile = ["wp", "android", "ios", "bb"].includes(t.os);
        }
    };
    
    t.init();
    return t;
})();

// Modulio eksportavimas
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        global.browser = factory();
    }
})(this, function () {
    return browser;
});